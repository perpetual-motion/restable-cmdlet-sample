// REST Service Properties File

rest-service  {
	// the file that contains the user accounts (if you are using authentication)
	user-accounts : "users.properties";

	// http addresses to listen to. seperate with commas.
    listen-on: {
		"http://*/" 
	};
};

rest-command[gethelloworld] {
	// by commenting this out, this command is exposed via rest without any security at all 
	// roles : users;

	cmdlet : "get-HelloWorld";

	// optional: You can set default parameters for cmdlet values:
	default-parameters : {
        second = " this is a happy day"
    };

	// optional: You can set FORCE parameters for cmdlet values:
	forced-parameters : {
        third = " CAN'T CHANGE"
    };
}

rest-command[addnumbers] {
	// you can define any role required
	// just make sure that you have a user that has that role!
	roles : users;

    cmdlet : "add-numbers" ;
}

// this cmdlet lets people reset their password. 
// this one is built-into the ClrPlus assembly.
rest-command[setservicepassword] {
	roles: users;
	cmdlet: "set-servicepassword";
}

/* 
Other examples:
==============

rest-command {
	// you can specify many roles
	roles: {editors, admins};

	cmdlet : "some-command";

	// optional: You can set default parameters for cmdlet values that take arrays too
	default-parameters : {
		// if the user passes values for defaults, they get merged with the ones 
		// the admin sets here.
        someparam = { "garrett", "serack" }
		someotherparam = { "serack", "garrett" }
    };

	// optional: You can set default parameters for cmdlet values that take arrays too
	forced-parameters : {
		// if the user passes values for forced parameters, they get dropped with the ones 
		// and ONLY the ones the admin sets here are used.
        someparam = { "garrett", "serack" }
		someotherparam = { "serack", "garrett" }
    };
}


*/
